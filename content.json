{"meta":{"title":"八点半的星光","subtitle":"","description":"","author":"Mary Syy","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-08-24T08:10:07.000Z","updated":"2020-08-24T08:43:51.025Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-08-24T08:11:35.000Z","updated":"2020-08-24T08:43:33.769Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2020-08-24T08:13:27.000Z","updated":"2020-08-24T08:43:58.503Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"books","date":"2020-08-24T08:13:05.000Z","updated":"2020-08-24T08:43:54.706Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"repository","date":"2020-08-24T08:12:57.000Z","updated":"2020-08-24T08:43:40.043Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"links","date":"2020-08-24T08:13:14.000Z","updated":"2020-08-24T08:43:44.730Z","comments":false,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""}],"posts":[{"title":"let与const","slug":"let与const","date":"2020-08-24T07:18:11.000Z","updated":"2020-08-24T08:04:08.274Z","comments":false,"path":"2020/08/24/let与const/","link":"","permalink":"http://yoursite.com/2020/08/24/let%E4%B8%8Econst/","excerpt":"","text":"var 不支持封闭作用域，会声明到全局作用域上 12345for(var i &#x3D; 0; i&lt;3;i++&gt;) &#123; setTimeout(function() &#123; console.log(i) &#125;, 1000)&#125; 结果：3,3,3 解决方法一：加匿名函数1234567for(var i &#x3D; 0; i&lt;3;i++&gt;) &#123; (function(i) &#123; setTimeout(function() &#123; console.log(i) &#125;, 1000) &#125;)(i)&#125; 解决方法二：let 和{}配合可以产生一个作用域let支持块级作用域，声明的变量只会声明在当前作用域内 123456for(let i &#x3D; 0; i&lt;3;i++&gt;) &#123; setTimeout(function() &#123; console.log(i) &#x2F;&#x2F; 0,1,2 &#125;, 1000)&#125;console.log(i) &#x2F;&#x2F; i is not defined let 可以解决 ：1、作用域污染问题和局部作用域的问题2、在同一个作用域下多次声明同一个变量问题3、解决域解释问题（变量提升）（在定义之前使用）暂存死区，如果当前作用域内存在这个变量，那么这个作用域就会绑定这个变量，不会继续向上查找 12345let a &#x3D; 1;&#123; console.log(a) &#x2F;&#x2F; 报错 let a &#x3D; 2;&#125; 通过const声明的变量不能被修改，不能被修改引用空间 123const a &#x3D; &#123;name: &quot;hh&quot;&#125;;a.age &#x3D; 15;console.log(a) &#x2F;&#x2F; &#123;name: &quot;hh&quot;, age: 15&#125;","categories":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/categories/ES6/"}],"tags":[]}],"categories":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/categories/ES6/"}],"tags":[]}